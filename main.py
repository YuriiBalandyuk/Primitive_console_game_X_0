"""
Сценарій
Ваше завдання — написати просту програму, яка ніби грає з користувачем у хрестики-нулики. Щоб вам було легше, ми вирішили спростити гру. Ось наші припущення:

комп'ютер (тобто ваша програма) має грати в гру за 'X';
користувач (наприклад, ви) має грати в гру, використовуючи 'O';
перший хід належить комп’ютеру − він завжди ставить свій перший 'X' посередині дошки;
усі квадрати пронумеровані послідовно рядок за рядком, починаючи з 1 (для довідки перегляньте приклад нижче)
користувач робить свій хід, вводячи номер вибраного ним квадрата − число має бути дійсним, тобто воно повинно бути цілим та бути більше 0 і менше 10, також не можна вказувати на квадрат, який вже зайнятий;
програма перевіряє, чи закінчилася гра − є чотири можливих вердикти: гра має продовжуватися, гра закінчується нічиєю, ви виграли або виграв комп’ютер;
комп'ютер відповідає своїм ходом і перевірка повторюється;
не впроваджуйте жодної форми штучного інтелекту − для гри достатньо, щоб комп'ютер робив випадковий вибір квадрата.

"""



"""
Вимоги
Реалізуйте наступні функції:

дошка повинна зберігатися у вигляді триелементного списку, тоді як кожен елемент є ще одним список із трьох елементів (внутрішні списки являють собою рядки), 
так щоб усі квадрати могли бути доступні за допомогою наступного синтаксису:

    board[row][column]
    
* кожен з елементів внутрішнього списку може містити 'O', 'X' або цифру, яка відповідає номеру квадрата (такий квадрат вважається вільним)
* зовнішній вигляд дошки повинен бути точно таким, як і у наведеному прикладі.
* реалізувати функції, які наведені у редакторі.
"""
# def display_board(board):
#     # Функція приймає один параметр, що містить поточний статус дошки
#     # і виводить його на консоль.
#
#
# def enter_move(board):
#     # Функція приймає поточний статус дошки, запитує користувача про його хід,
#     # перевіряє введення та оновлює дошку відповідно до рішення користувача.
#
#
# def make_list_of_free_fields(board):
#     # Функція перевіряє дошку та створює список усіх вільних квадратів;
#     # список складається з кортежів, так що кожен кортеж є парою номерів рядка і стовпчика.
#
#
# def winner_for(board, sign):
#     # Функція аналізує стан дошки, щоб перевірити, чи
#     # э в грі переможець
#
#
# def draw_move(board):
#     # Функція малює хід комп'ютера та оновлює дошку.

while True:

    numbers = [] # Основний список для масиву 3x3

    for i in range(3):
        start_ = i * 3 + 1
        end_ = start_ + 3
        row = []
        for j in range(start_, end_):
            row.append(j)
        numbers.append(row)

    print(numbers, "\n")

    print("+---------"*3 + "+" + "\n" + "|         "*3+"|"+ "\n" + "|   ", numbers[0][0]," "+"  |   ", numbers[0][1]," "+"  |   ", numbers[0][2], "   |" + "\n" + "|         "*3+"|"\
    + "\n" + "+---------"*3 + "+" + "\n" + "|         "*3+"|"+ "\n" + "|   ", numbers[1][0]," "+"  |   ", numbers[1][1]," "+"  |   ", numbers[1][2], "   |" + "\n" + "|         "*3+"|"\
    + "\n" + "+---------"*3 + "+" + "\n" + "|         "*3+"|"+ "\n" + "|   ", numbers[2][0]," "+"  |   ", numbers[2][1]," "+"  |   ", numbers[2][2], "   |" + "\n" + "|         "*3+"|"\
    + "\n" + "+---------"*3 + "+"
    )

    break